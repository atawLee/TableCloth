<Page x:Class="TableCloth.Pages.CatalogPage"
      xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
      xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
      xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006" 
      xmlns:d="http://schemas.microsoft.com/expression/blend/2008" 
      xmlns:i="http://schemas.microsoft.com/xaml/behaviors" 
      xmlns:res="clr-namespace:TableCloth.Resources;assembly=TableCloth.Resources"
      xmlns:vm="clr-namespace:TableCloth.ViewModels"
      xmlns:catalogmodel="clr-namespace:TableCloth.Models.Catalog"
      xmlns:tablecloth="clr-namespace:TableCloth"
      mc:Ignorable="d" 
      d:DesignHeight="450" d:DesignWidth="800"
      Title="{x:Static res:UIStringResources.CatalogPage_Title}"
      d:DataContext="{d:DesignInstance Type=vm:CatalogPageViewModelForDesigner, IsDesignTimeCreatable=True}"
      Loaded="Page_Loaded">
    <i:Interaction.Triggers>
        <i:EventTrigger EventName="Loaded">
            <i:InvokeCommandAction Command="{Binding CatalogPageLoadedCommand}">
                <i:InvokeCommandAction.CommandParameter>
                    <Binding Path="DataContext" RelativeSource="{RelativeSource Mode=FindAncestor, AncestorType={x:Type Page}}" />
                </i:InvokeCommandAction.CommandParameter>
            </i:InvokeCommandAction>
        </i:EventTrigger>
    </i:Interaction.Triggers>
    <Page.Resources>
        <Style x:Key="FocusVisual">
            <Setter Property="Control.Template">
                <Setter.Value>
                    <ControlTemplate>
                        <Rectangle Margin="2" SnapsToDevicePixels="true" Stroke="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}" StrokeThickness="1" StrokeDashArray="1 2"/>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>
        <SolidColorBrush x:Key="Item.MouseOver.Background" Color="Transparent"/>
        <SolidColorBrush x:Key="Item.MouseOver.Border" Color="#a826A0Da"/>
        <SolidColorBrush x:Key="Item.SelectedInactive.Background" Color="#3DDADADA"/>
        <SolidColorBrush x:Key="Item.SelectedInactive.Border" Color="#FFDADADA"/>
        <SolidColorBrush x:Key="Item.SelectedActive.Background" Color="#3D26A0DA"/>
        <SolidColorBrush x:Key="Item.SelectedActive.Border" Color="#FF26A0DA"/>

        <Style x:Key="FileItemStyle" TargetType="{x:Type ListViewItem}">
            <Setter Property="Margin" Value="5,5,5,5"/>
            <Setter Property="Padding" Value="0,0,0,0"/>
            <Setter Property="HorizontalAlignment" Value="Left"/>
            <Setter Property="SnapsToDevicePixels" Value="True"/>
            <Setter Property="Height" Value="96" />
            <Setter Property="Padding" Value="4,1"/>
            <Setter Property="Foreground" Value="{DynamicResource ControlDefaultForeground}" />
            <Setter Property="HorizontalContentAlignment" Value="Center"/>
            <Setter Property="VerticalContentAlignment" Value="Top"/>
            <Setter Property="Background" Value="Transparent"/>
            <Setter Property="BorderBrush" Value="Transparent"/>
            <Setter Property="BorderThickness" Value="1"/>
            <Setter Property="FocusVisualStyle" Value="{StaticResource FocusVisual}"/>
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type ListViewItem}">
                        <Border x:Name="Bd" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" Padding="{TemplateBinding Padding}" SnapsToDevicePixels="true">
                            <Grid HorizontalAlignment="Left" VerticalAlignment="Top" Height="96">
                                <Border x:Name="border" BorderBrush="{x:Null}" BorderThickness="1" HorizontalAlignment="Stretch" VerticalAlignment="Stretch" CornerRadius="2.5"/>
                                <StackPanel HorizontalAlignment="Stretch" VerticalAlignment="Stretch">
                                    <ContentPresenter HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
                                </StackPanel>
                            </Grid>
                        </Border>
                        <ControlTemplate.Triggers>
                            <MultiTrigger>
                                <MultiTrigger.Conditions>
                                    <Condition Property="IsMouseOver" Value="True"/>
                                </MultiTrigger.Conditions>
                                <Setter Property="Background" TargetName="Bd" Value="{StaticResource Item.MouseOver.Background}"/>
                                <Setter Property="BorderBrush" TargetName="Bd" Value="{StaticResource Item.MouseOver.Border}"/>
                            </MultiTrigger>
                            <MultiTrigger>
                                <MultiTrigger.Conditions>
                                    <Condition Property="Selector.IsSelectionActive" Value="False"/>
                                    <Condition Property="IsSelected" Value="True"/>
                                </MultiTrigger.Conditions>
                                <Setter Property="Background" TargetName="Bd" Value="{StaticResource Item.SelectedInactive.Background}"/>
                                <Setter Property="BorderBrush" TargetName="Bd" Value="{StaticResource Item.SelectedInactive.Border}"/>
                            </MultiTrigger>
                            <MultiTrigger>
                                <MultiTrigger.Conditions>
                                    <Condition Property="Selector.IsSelectionActive" Value="True"/>
                                    <Condition Property="IsSelected" Value="True"/>
                                </MultiTrigger.Conditions>
                                <Setter Property="Background" TargetName="Bd" Value="{StaticResource Item.SelectedActive.Background}"/>
                                <Setter Property="BorderBrush" TargetName="Bd" Value="{StaticResource Item.SelectedActive.Border}"/>
                            </MultiTrigger>
                            <Trigger Property="IsEnabled" Value="False">
                                <Setter Property="TextElement.Foreground" TargetName="Bd" Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}"/>
                            </Trigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>

        <Style TargetType="{x:Type GroupItem}">
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate>
                        <Expander x:Name="HeaderExpander" IsExpanded="True">
                            <Expander.Header>
                                <StackPanel Orientation="Horizontal">
                                    <TextBlock Text="{Binding Name}" FontWeight="Bold" VerticalAlignment="Bottom" />
                                    <TextBlock Text="{Binding ItemCount, StringFormat={x:Static res:UIStringResources.CatalogPage_ItemCountLabel}}" FontWeight="Bold" Margin="10,0,0,0" VerticalAlignment="Bottom" />
                                </StackPanel>
                            </Expander.Header>
                            <!-- https://stackoverflow.com/questions/41724197/how-to-hide-togglebutton-in-grouping-expander-wpf -->
                            <Expander.Style>
                                <Style TargetType="Expander">
                                    <Setter Property="IsExpanded" Value="False"></Setter>
                                    <Setter Property="Template">
                                        <Setter.Value>
                                            <ControlTemplate TargetType="{x:Type Expander}">
                                                <Border BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" SnapsToDevicePixels="true">
                                                    <DockPanel>
                                                        <ToggleButton x:Name="HeaderSite" ContentTemplate="{TemplateBinding HeaderTemplate}" ContentTemplateSelector="{TemplateBinding HeaderTemplateSelector}" Content="{TemplateBinding Header}" DockPanel.Dock="Top" Foreground="{TemplateBinding Foreground}" FontWeight="{TemplateBinding FontWeight}" FontStyle="{TemplateBinding FontStyle}" FontStretch="{TemplateBinding FontStretch}" FontSize="{TemplateBinding FontSize}" FontFamily="{TemplateBinding FontFamily}" HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}" IsChecked="{Binding IsExpanded, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}" Margin="1" MinWidth="0" MinHeight="0" Padding="{TemplateBinding Padding}" VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}">
                                                            <ToggleButton.Template>
                                                                <ControlTemplate TargetType="{x:Type ToggleButton}">
                                                                    <Border Padding="{TemplateBinding Padding}">
                                                                        <ContentPresenter Margin="0,4,0,0" Grid.Row="1" RecognizesAccessKey="True" SnapsToDevicePixels="True" VerticalAlignment="Top"/>
                                                                    </Border>
                                                                </ControlTemplate>
                                                            </ToggleButton.Template>
                                                        </ToggleButton>
                                                        <ContentPresenter x:Name="ExpandSite" DockPanel.Dock="Bottom" Focusable="false" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" Margin="{TemplateBinding Padding}" Visibility="Collapsed" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
                                                    </DockPanel>
                                                </Border>
                                                <ControlTemplate.Triggers>
                                                    <Trigger Property="IsExpanded" Value="true">
                                                        <Setter Property="Visibility" TargetName="ExpandSite" Value="Visible"/>
                                                    </Trigger>
                                                    <Trigger Property="ExpandDirection" Value="Right">
                                                        <Setter Property="DockPanel.Dock" TargetName="ExpandSite" Value="Right"/>
                                                        <Setter Property="DockPanel.Dock" TargetName="HeaderSite" Value="Left"/>
                                                        <Setter Property="Style" TargetName="HeaderSite" Value="{StaticResource ExpanderRightHeaderStyle}"/>
                                                    </Trigger>
                                                    <Trigger Property="ExpandDirection" Value="Up">
                                                        <Setter Property="DockPanel.Dock" TargetName="ExpandSite" Value="Top"/>
                                                        <Setter Property="DockPanel.Dock" TargetName="HeaderSite" Value="Bottom"/>
                                                        <Setter Property="Style" TargetName="HeaderSite" Value="{StaticResource ExpanderUpHeaderStyle}"/>
                                                    </Trigger>
                                                    <Trigger Property="ExpandDirection" Value="Left">
                                                        <Setter Property="DockPanel.Dock" TargetName="ExpandSite" Value="Left"/>
                                                        <Setter Property="DockPanel.Dock" TargetName="HeaderSite" Value="Right"/>
                                                        <Setter Property="Style" TargetName="HeaderSite" Value="{StaticResource ExpanderLeftHeaderStyle}"/>
                                                    </Trigger>
                                                    <Trigger Property="IsEnabled" Value="false">
                                                        <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}"/>
                                                    </Trigger>
                                                </ControlTemplate.Triggers>
                                            </ControlTemplate>
                                        </Setter.Value>
                                    </Setter>
                                    <Style.Triggers>
                                        <DataTrigger Binding="{Binding Name}" Value="Title" >
                                            <Setter Property="IsExpanded" Value="True"></Setter>
                                            <Setter Property="IsEnabled" Value="False" />
                                        </DataTrigger>
                                    </Style.Triggers>
                                </Style>
                            </Expander.Style>
                            <ItemsPresenter />
                        </Expander>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>
    </Page.Resources>
    <Grid>
        <Grid.RowDefinitions>
            <RowDefinition Height="45"/>
            <RowDefinition Height="*"/>
            <RowDefinition Height="45" />
        </Grid.RowDefinitions>
        <Grid.ColumnDefinitions>
            <ColumnDefinition Width="150" />
            <ColumnDefinition Width="80*" />
            <ColumnDefinition Width="30*" />
        </Grid.ColumnDefinitions>
        <TextBlock Grid.Row="0" Grid.Column="1" VerticalAlignment="Center" Margin="8 0 8 0" FontWeight="Bold" TextWrapping="Wrap" Visibility="{Binding HasServices, Converter={StaticResource BooleanToVisibilityConverter}}" Text="{x:Static res:UIStringResources.CatalogPage_Instruction}" d:Visibility="Visible" />
        <StackPanel Grid.Row="0" Grid.RowSpan="2" Grid.Column="0" Margin="2" IsEnabled="{Binding HasServices}">
            <RadioButton Tag="{x:Static catalogmodel:CatalogInternetServiceCategory.Banking}" Click="CategoryRadioButton_Click" Margin="8" BorderBrush="Transparent" Background="Transparent" IsChecked="{Binding Path=SelectedServiceCategory, Converter={StaticResource EnumBooleanConverter}, Mode=OneWay, ConverterParameter=Banking}" Content="{x:Static res:CommonStrings.DisplayName_Banking}" />
            <RadioButton Tag="{x:Static catalogmodel:CatalogInternetServiceCategory.Financing}" Click="CategoryRadioButton_Click" Margin="8" BorderBrush="Transparent" Background="Transparent" IsChecked="{Binding Path=SelectedServiceCategory, Converter={StaticResource EnumBooleanConverter}, Mode=OneWay, ConverterParameter=Financing}" Content="{x:Static res:CommonStrings.DisplayName_Financing}" />
            <RadioButton Tag="{x:Static catalogmodel:CatalogInternetServiceCategory.Security}" Click="CategoryRadioButton_Click" Margin="8" BorderBrush="Transparent" Background="Transparent" IsChecked="{Binding Path=SelectedServiceCategory, Converter={StaticResource EnumBooleanConverter}, Mode=OneWay, ConverterParameter=Security}" Content="{x:Static res:CommonStrings.DisplayName_Security}" />
            <RadioButton Tag="{x:Static catalogmodel:CatalogInternetServiceCategory.Insurance}" Click="CategoryRadioButton_Click" Margin="8" BorderBrush="Transparent" Background="Transparent" IsChecked="{Binding Path=SelectedServiceCategory, Converter={StaticResource EnumBooleanConverter}, Mode=OneWay, ConverterParameter=Insurance}" Content="{x:Static res:CommonStrings.DisplayName_Insurance}" />
            <RadioButton Tag="{x:Static catalogmodel:CatalogInternetServiceCategory.CreditCard}" Click="CategoryRadioButton_Click" Margin="8" BorderBrush="Transparent" Background="Transparent" IsChecked="{Binding Path=SelectedServiceCategory, Converter={StaticResource EnumBooleanConverter}, Mode=OneWay, ConverterParameter=CreditCard}" Content="{x:Static res:CommonStrings.DisplayName_CreditCard}" />
            <RadioButton Tag="{x:Static catalogmodel:CatalogInternetServiceCategory.Government}" Click="CategoryRadioButton_Click" Margin="8" BorderBrush="Transparent" Background="Transparent" IsChecked="{Binding Path=SelectedServiceCategory, Converter={StaticResource EnumBooleanConverter}, Mode=OneWay, ConverterParameter=Government}" Content="{x:Static res:CommonStrings.DisplayName_Government}" />
            <RadioButton Tag="{x:Static catalogmodel:CatalogInternetServiceCategory.Education}" Click="CategoryRadioButton_Click" Margin="8" BorderBrush="Transparent" Background="Transparent" IsChecked="{Binding Path=SelectedServiceCategory, Converter={StaticResource EnumBooleanConverter}, Mode=OneWay, ConverterParameter=Education}" Content="{x:Static res:CommonStrings.DisplayName_Education}" />
            <RadioButton Tag="{x:Static catalogmodel:CatalogInternetServiceCategory.Other}" Click="CategoryRadioButton_Click" Margin="8" BorderBrush="Transparent" Background="Transparent" IsChecked="{Binding Path=SelectedServiceCategory, Converter={StaticResource EnumBooleanConverter}, Mode=OneWay, ConverterParameter=Other}" Content="{x:Static res:CommonStrings.DisplayName_Other}" />
            <CheckBox FocusVisualStyle="{x:Null}" Margin="8" IsChecked="{Binding OnFavoriteOnly}">즐겨찾기</CheckBox>
        </StackPanel>
        <UniformGrid Grid.Row="2" Grid.Column="0" Margin="4" Rows="1">
            <Button Content="{x:Static res:UIStringResources.Button_AboutButton}" Command="{Binding AboutThisAppCommand}">
                <Button.CommandParameter>
                    <Binding Path="DataContext" RelativeSource="{RelativeSource Mode=FindAncestor, AncestorType={x:Type Page}}" />
                </Button.CommandParameter>
            </Button>
            <Button Content="{x:Static res:UIStringResources.Button_DebugButton}" Command="{Binding ShowDebugInfoCommand}" Margin="5 0 0 0 " Visibility="{Binding Source={x:Static tablecloth:Helpers.IsDevelopmentBuild}, Converter={StaticResource BooleanToVisibilityConverter}}">
                <Button.CommandParameter>
                    <Binding Path="DataContext" RelativeSource="{RelativeSource Mode=FindAncestor, AncestorType={x:Type Page}}" />
                </Button.CommandParameter>
            </Button>
        </UniformGrid>
        <TextBox Grid.Row="0" Grid.Column="2" Text="{Binding SearchKeyword, UpdateSourceTrigger=PropertyChanged}" Width="Auto" Margin="0 8 8 8" VerticalContentAlignment="Center" GotKeyboardFocus="SiteCatalogFilter_GotKeyboardFocus" LostMouseCapture="SiteCatalogFilter_LostMouseCapture" LostKeyboardFocus="SiteCatalogFilter_LostKeyboardFocus" Visibility="{Binding HasServices, Converter={StaticResource BooleanToVisibilityConverter}}" d:Visibility="Visible">
            <TextBox.Style>
                <Style TargetType="TextBox" xmlns:sys="clr-namespace:System;assembly=mscorlib">
                    <Style.Resources>
                        <VisualBrush x:Key="CueBannerBrush" AlignmentX="Left" AlignmentY="Center" Stretch="None">
                            <VisualBrush.Visual>
                                <Label Content="{x:Static res:UIStringResources.SearchFilter_Watermark}" Foreground="LightGray" />
                            </VisualBrush.Visual>
                        </VisualBrush>
                    </Style.Resources>
                    <Style.Triggers>
                        <Trigger Property="Text" Value="{x:Static sys:String.Empty}">
                            <Setter Property="Background" Value="{StaticResource CueBannerBrush}" />
                        </Trigger>
                        <Trigger Property="IsKeyboardFocused" Value="True">
                            <Setter Property="Background" Value="White" />
                        </Trigger>
                    </Style.Triggers>
                </Style>
            </TextBox.Style>
        </TextBox>
        <Popup IsOpen="False" x:Name="LabelPopup" AllowsTransparency="True" Focusable="False">
            <Border BorderThickness="0" Background="Transparent" Focusable="False">
                <ContentControl Focusable="False" MouseDoubleClick="ContentControl_MouseDoubleClick">
                    <TextBlock Text="Test" x:Name="LabelPopupTextBlock" Focusable="False" />
                </ContentControl>
            </Border>
        </Popup>
        <ListView Grid.Row="1" Grid.RowSpan="2" Grid.Column="1" Grid.ColumnSpan="2" VerticalAlignment="Stretch" x:Name="SiteCatalog" Width="Auto" SelectedItem="{Binding Path='SelectedService'}" ItemsSource="{Binding Path='Services'}" SelectionMode="Single" Visibility="{Binding Path='HasServices', Converter={StaticResource BooleanToVisibilityConverter}}" ItemContainerStyle="{StaticResource FileItemStyle}" PreviewMouseDown="SiteCatalog_PreviewMouseDown" d:Visibility="Visible" d:ItemsSource="{Binding ServicesForDesigner}" VirtualizingPanel.IsContainerVirtualizable="True" VirtualizingPanel.IsVirtualizing="True" VirtualizingPanel.IsVirtualizingWhenGrouping="True" SelectionChanged="SiteCatalog_SelectionChanged" ScrollViewer.ScrollChanged="SiteCatalog_ScrollChanged" SizeChanged="SiteCatalog_SizeChanged" GotFocus="SiteCatalog_GotFocus" LostFocus="SiteCatalog_LostFocus">
            <ListView.InputBindings>
                <KeyBinding Key="Return" Command="{Binding CatalogPageItemSelectCommand}">
                    <KeyBinding.CommandParameter>
                        <Binding Path="DataContext" RelativeSource="{RelativeSource Mode=FindAncestor, AncestorType={x:Type Page}}" />
                    </KeyBinding.CommandParameter>
                </KeyBinding>
            </ListView.InputBindings>
            <ListView.Template>
                <ControlTemplate>
                    <ScrollViewer CanContentScroll="False" IsDeferredScrollingEnabled="False" HorizontalScrollBarVisibility="Disabled">
                        <ItemsPresenter />
                    </ScrollViewer>
                </ControlTemplate>
            </ListView.Template>
            <ListView.ItemsPanel>
                <ItemsPanelTemplate>
                    <WrapPanel IsItemsHost="True"/>
                </ItemsPanelTemplate>
            </ListView.ItemsPanel>
            <ListView.ItemTemplate>
                <DataTemplate>
                    <Grid Width="48" Height="96">
                        <Grid.InputBindings>
                            <MouseBinding MouseAction="LeftDoubleClick" Command="{Binding RelativeSource={RelativeSource AncestorType=Page, Mode=FindAncestor}, Path=DataContext.CatalogPageItemSelectCommand }">
                                <MouseBinding.CommandParameter>
                                    <Binding Path="DataContext" RelativeSource="{RelativeSource Mode=FindAncestor, AncestorType={x:Type Page}}" />
                                </MouseBinding.CommandParameter>
                            </MouseBinding>
                        </Grid.InputBindings>
                        <Grid.RowDefinitions>
                            <RowDefinition Height="50*" />
                            <RowDefinition Height="2*" />
                            <RowDefinition Height="48*" />
                        </Grid.RowDefinitions>
                        <Grid.ToolTip>
                            <TextBlock Text="{Binding DisplayName}" d:Text="{Binding DisplayName}" TextWrapping="NoWrap" TextTrimming="None"/>
                        </Grid.ToolTip>
                        
                        <Image Grid.Row="0" x:Name="Icon" Source="{Binding Id, Mode=OneWay, Converter={StaticResource ServiceLogoConverter}}" RenderOptions.BitmapScalingMode="Fant" HorizontalAlignment="Center" VerticalAlignment="Center" Stretch="Uniform" />
                        <!--Favorite Toggle-->
                        <ToggleButton Grid.Row="0" Width="15" Height="15" IsChecked="{Binding IsFavorite}" HorizontalAlignment="Right" VerticalAlignment="Top" Margin="3" Command="{Binding Path=DataContext.CatalogPageItemFavoriteCommand, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type ListView}}}"
                                      CommandParameter="{Binding}">
                            <ToggleButton.Template>
                                <ControlTemplate TargetType="ToggleButton">
                                    <Grid>
                                        <Border Background="Transparent">
                                            <Path x:Name="ButtonPath" Data="M19 3H5C3.9 3 3 3.9 3 5V19C3 20.1 3.9 21 5 21H19C20.1 21 21 20.1 21 19V5C21 3.9 20.1 3 19 3M18 14L15.5 12.5L13 14V6H18V14Z" Fill="LightGray" Stretch="Uniform"/>
                                        </Border>
                                    </Grid>
                                    <ControlTemplate.Triggers>
                                        <Trigger Property="IsChecked" Value="True">
                                            <Setter TargetName="ButtonPath" Property="Fill" Value="#BB0000"/>
                                        </Trigger>
                                        <Trigger Property="IsChecked" Value="False">
                                            <Setter TargetName="ButtonPath" Property="Fill" Value="LightGray"/>
                                        </Trigger>
                                    </ControlTemplate.Triggers>
                                </ControlTemplate>
                            </ToggleButton.Template>
                        </ToggleButton>
                        <TextBlock x:Name="DisplayNameLabel" Grid.Row="2" Text="{Binding DisplayName}" TextAlignment="Center" TextWrapping="Wrap" Panel.ZIndex="3">
                            <TextBlock.Style>
                                <Style TargetType="{x:Type TextBlock}">
                                    <Setter Property="TextTrimming" Value="CharacterEllipsis" />
                                    <Style.Triggers>
                                        <DataTrigger Binding="{Binding IsSelected, RelativeSource={RelativeSource AncestorType={x:Type ListViewItem}}}" Value="True">
                                            <Setter Property="TextTrimming" Value="None"/>
                                        </DataTrigger>
                                    </Style.Triggers>
                                </Style>
                            </TextBlock.Style>
                        </TextBlock>
                    </Grid>
                </DataTemplate>
            </ListView.ItemTemplate>
            <ListView.GroupStyle>
                <GroupStyle/>
            </ListView.GroupStyle>
        </ListView>
        <StackPanel Grid.Row="1" Grid.RowSpan="2" Grid.Column="1" Grid.ColumnSpan="2" Margin="0 5 0 0" Visibility="{Binding HasServices, Converter={StaticResource InverseBooleanToVisibilityConverter}}" Orientation="Vertical" d:Visibility="Hidden">
            <Label VerticalAlignment="Top" HorizontalAlignment="Center" Content="{x:Static res:UIStringResources.MainWindow_SelectSiteLabelText_Alt2}" />
            <Button x:Name="ReloadCatalogButton" Width="250" Margin="0 10 0 0" Content="{x:Static res:UIStringResources.Button_AppRestartButton}" Command="{Binding AppRestartCommand}">
                <Button.CommandParameter>
                    <Binding Path="DataContext" RelativeSource="{RelativeSource Mode=FindAncestor, AncestorType={x:Type Page}}" />
                </Button.CommandParameter>
            </Button>
        </StackPanel>
    </Grid>
</Page>
